openapi: 3.0.3
info:
  title: Team-Dev-Api-Spec
  description: |-
  version: 1.0.0

servers:
  - url: team-dev-api
tags:
  - name: user
  - name: post
  - name: cohort
paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: Create new user
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
       '201':
        
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedUser'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: query
          description: 'The name that needs to be fetched. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
 
  /login:
    post:
      tags:
        - user
      summary: Localhost Login
      description: ''
      operationId: loginUser
      requestBody:
        description: User login information 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login'
          application/xml:
            schema:
              $ref: '#/components/schemas/login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/login'
      
      responses:
        '200':
          description: OK
          
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
               $ref: '#/components/schemas/loginRes'
                
            application/json:
              schema:
               $ref: '#/components/schemas/loginRes'
                
        '400':
          description: Invalid username/password supplied
  
  /user/{id}:
    get:
      tags:
        - user
      summary: Get user by user id
      description: ''
      operationId: getUserByID
      parameters:
        - name: id
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    
          
    patch:
      tags:
        - user
      summary: updates cohort
      description: Creates list of users with given input array
      operationId: asd
      parameters:
        - name: id
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortAddUser'          
        '401':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /log:
    post:
      tags:
       - log
      summary: Create log
      description: This can only be done by authorized user.
      operationId: createLog
      requestBody:
        description: Created log boject
        content:
         application/json:
          schema:
           type: object
           properties:
            date: 
             type: string
            cohort_id:
             type: integer
            lines:
             properties:
              content:
               type: string
      responses:
        '200':
          description: Successful operation
        
        '401':
          description: Unauthorized
          content:
           application/json:
             schema:
              type: object
              properties:
                  status: 
                   type: string
                   example: fail
                  data:
                   properties:
                    authentication:
                      type: string
                      example: Invalid or missing access token
               
            
             
                
  /post:
    post:
      tags:
        - post
      summary: Create post
      description: This can only be done by the logged in user.
      operationId: createPost
      requestBody:
        description: Created post object
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        201:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        400:
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - post
      summary: gets all posts
      description: get all posts
      operationId: getPosts
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'          
        '401':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /cohort:
    post:
      tags:
        - cohort
      summary: Create cohort
      description: This can only be done by the logged in user with role TEACHER.
      operationId: createCohort
      responses:
        201:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cohort'
        400:
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
   
components:
  schemas:
    Post:
      type: object
      properties:
        post:
          properties:
            id:
              type: integer
              format: int64
            content:
              type: string
    User:
      type: object
      properties:
        status:
          type: string
        data:
          properties:
            first_name:
              type: string
              example: Nathan
            last_name:
              type: string
              example: James
            email:
              type: string
              example: ngk5@gmail.com
            password:
              type: string
            biography:
              type: string
              example: Hello World
            github_url:
              type: string
              example: https://github.com/vherus
    Posts:
      type: object
      properties:
        status:
          type: string
        data:
          properties:
            posts:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                  content:
                    type: string
                  author:
                    type: object
                    properties:
                      id:
                        type: integer
                      cohortId:
                        type: integer
                      firstName:
                        type: string
                      lastName:
                        type: string
                      email:
                        type: string
                      bio:
                        type: string
                      githubUrl:
                        type: string
                      role:
                        type: string
    Cohort:
      type: object
      properties:
        status:
          type: string
        data:
          properties:
            cohort:
              properties:
                id:
                  type: integer
                  format: int64
    CohortAddUser:
      type: object
      properties:
        status:
          type: string
        data:
          properties:
            user:
              properties:
                cohort_id:
                  type: integer
                  format: int64
    CreatedUser:
          type: object 
          properties: 
            status:
              type: string
              example: success
            data:
             properties:
              user:
               properties:
                 id:
                  type: integer
                 cohort_id:
                  type: integer
                 role:
                  type: string 
                  example: Student
                 first_name:
                  type: string
                  example: Nathan
                 last_name:
                  type: string
                  example: James
                 email:
                  type: string
                  example: ngk5@gmail.com
                 password:
                  type: string
                 biography:
                  type: string
                  example: Hello World
                 github_url:
                  type: string
                  example: https://github.com/vherus
    login:
      type: object 
      properties:
        email:
          type: string 
        password:
          type: string
          
    loginRes:
      type: object 
      properties:
        status: 
          type: string
          example: success
        data:
         properties:
          token:
           type: string
        user:
         properties:
            id: 
             type: integer
             example: 1
            cohort_id: 
             type: integer 
            role:
             type: string 
             example: Student
            first_name:
             type: string
             example: Nathan
            last_name:
              type: string
              example: James
            email:
              type: string
              example: ngk5@gmail.com
            password:
              type: string
            biography:
              type: string
              example: Hello World
            github_url:
              type: string
              example: https://github.com/vherus
  
        
        
          
    Error:
      type: object
      properties:
        status:
          type: string
        data:
          properties:
            error:
              type: string            
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'

openapi: 3.0.3
info:
  title: Team-Dev-Api-Spec
  description: |-
  version: 1.0.0

servers:
  - url: team-dev-api
tags:
  - name: user
    description: Operations about user
paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: Create new user
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
       '201':
        
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedUser'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
 
  /login:
    post:
      tags:
        - user
      summary: Localhost Login
      description: ''
      operationId: loginUser
      requestBody:
        description: User login information 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login'
          application/xml:
            schema:
              $ref: '#/components/schemas/login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/login'
      
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
  
  
  

   

    User:
      type: object
      properties:
      
        status:
          type: string
        data:
          properties:
            first_name:
              type: string
              example: Nathan
            last_name:
              type: string
              example: James
            email:
              type: string
              example: ngk5@gmail.com
            password:
              type: string
            biography:
              type: string
              example: Hello World
            github_url:
              type: string
              example: https://github.com/vherus
              
              
              
    CreatedUser:
      type: object 
      properties: 
        status:
          type: string
          example: success
        data:
         properties:
          user:
           properties:
             id:
              type: integer
             cohort_id:
              type: integer
             role:
              type: string 
              example: Student
             first_name:
              type: string
              example: Nathan
             last_name:
              type: string
              example: James
             email:
              type: string
              example: ngk5@gmail.com
             password:
              type: string
             biography:
              type: string
              example: Hello World
             github_url:
              type: string
              example: https://github.com/vherus
              
    login:
      type: object 
      properties:
        email:
          type: string 
        password:
          type: string
              
             
             
              
    Error:
      type: object
      properties:
        status:
          type: string
        data:
          properties:
            error:
              type: string            
             
           
              
              
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
              
              
